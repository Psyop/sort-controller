# Copyright (c) 2014, Psyop Media Company, LLC, Andrew Christopher Jones and Jonah Friedman 
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# sortControllerPlugin
# Initial code generated by XSI SDK Wizard
# Executed Wed Oct 7 18:44:46 EDT 2009 by ajones
#
#


import win32com.client
from win32com.client import constants
from time import time

null = None
false = 0
true = 1

def XSILoadPlugin( in_reg ):
	in_reg.Author = "ajones, jfriedman"
	in_reg.Name = "sortControllerPlugin"
	in_reg.Email = ""
	in_reg.URL = ""
	in_reg.Major = 1
	in_reg.Minor = 2

	in_reg.RegisterProperty("sortController")
	in_reg.RegisterMenu(constants.siMenuTbRenderPassEditID,"sortController_Menu",false,false)
	in_reg.RegisterCommand("sortControllerExecute", "sortControllerExecute")
	in_reg.RegisterCommand("sortAllSortControllers","sortAllSortControllers")
	in_reg.RegisterCommand("checkAllSortControllers","checkAllSortControllers")
	#RegistrationInsertionPoint - do not remove this line

	return true

def XSIUnloadPlugin( in_reg ):
	strPluginName = in_reg.Name
	Application.LogMessage(str(strPluginName) + str(" has been unloaded."),constants.siVerbose)
	return true

def sortController_Define( in_ctxt ):
	sortDefinitionDefaultText = "//SortController sorts objects in groups into partitions based on rules you write here.\r\n\r\nBackground_Objects_Partition = *\r\nExamplePartition = ExampleGroup\r\n\r\nl: Background_Lights_Partition = *\r\nl: exampleLightsPartition = ExampleGroup"
	
	oCustomProperty = in_ctxt.Source
	oCustomProperty.AddParameter2("version",constants.siInt2,1,0,null,null,null,constants.siClassifUnknown,constants.siPersistable)
	oCustomProperty.AddParameter2("sortDefinition",constants.siString,sortDefinitionDefaultText,null,null,null,null,constants.siClassifUnknown,constants.siPersistable + constants.siKeyable)

	return true

def sortController_DefineLayout( in_ctxt ):
	oLayout = in_ctxt.Source
	oLayout.Clear()
	oLayout.AddStaticText("Sort description DNF syntax:\n[o|l:]<setName>=<groupName1>&&<groupName2>|<groupName3>\n\nExample:   examplePartition=exampleGroup\nExample:   l:nonKeyLights = sg_fillLights | sg_accentLights\n\n// and /* comments are partially supported.\nSpaces are allowed (whitespace is ignored).",480,140)
	oLayout.AddRow()
	oLayout.AddButton("sort", "Sort")
	oLayout.AddButton("sortAll", "Sort All Passes")
	oLayout.AddButton("sortCheck", "Check")	
	oLayout.AddButton("sortCheckAll", "Check All Passes")
	oLayout.EndRow()
	oLayout.AddString("sortDefinition", "Sort Definition", True, 500)
	return true

def sortController_OnInit( ):
	Application.LogMessage("sortController_OnInit called",constants.siVerbose)

def sortControllerExecute_Init( in_ctxt ):
	oCmd = in_ctxt.Source
	oCmd.Description = ""
	oCmd.ReturnValue = true

	oArgs = oCmd.Arguments
	oArgs.AddWithHandler("sortControllers","Collection")	
	oArgs.Add("test_mode",2, False)
	return true
	
def sortAllSortControllers_Init( in_ctxt ):
	oCmd = in_ctxt.Source
	oCmd.Description = ""
	oCmd.ReturnValue = true

	oArgs = oCmd.Arguments
	oCmd.Arguments.Add( "silentMode", constants.siArgumentInput, False )
	return true

def checkAllSortControllers_Init( in_ctxt ):
	oCmd = in_ctxt.Source
	oCmd.Description = ""
	oCmd.ReturnValue = true

	oArgs = oCmd.Arguments
	oCmd.Arguments.Add( "silentMode", constants.siArgumentInput, False )
	return true

def sortController_OnClosed( ):
	Application.LogMessage("sortController_OnClosed called",constants.siVerbose)

def sortController_sortDefinition_OnChanged( ):
	Application.LogMessage("sortController_sortDefinition_OnChanged called",constants.siVerbose)
	oParam = PPG.sortDefinition
	paramVal = oParam.Value
	Application.LogMessage(str("New value: ") + str(paramVal),constants.siVerbose)





global g_silentMode
g_silentMode = False

def log(message = '', severity = constants.siInfo ):
	# a log message that can be silenced, so for other processes that may check all sort controllers.
	global g_silentMode
	if not g_silentMode:
		Application.LogMessage( message, severity )
	return True


def cleanupGroupName(symbol):
	return symbol.lower()

def getAllObjects():
	col = XSIFactory.CreateObject("XSI.Collection")
	col.SetAsText("*")
	allObjects = {}
	i = 0
	safelyIgnorableTypes = [ "null", "TransfoGroup", "crvlist", "camera", "bone", "cube", "root", "eff", "lattice", "wave", "SpotRoot", "SpotInterest", "Texture Support", 'CameraRoot', 'CameraInterest', '#model'  ]
	for o in col:
		if o.type not in safelyIgnorableTypes:
			if o.FullName.find("__SBMODEL_PRIV__") < 0:
				allObjects[o.FullName] = o
		else:
			i+=1
	# log( "Wildcard (*) optimization. " + str(i) + " items are unrenderable and will not be sorted." )
	return allObjects.keys()
	
def sortObjects(sortControllers, test_mode=False):
	global g_silentMode
	test_quickly = g_silentMode
	startTime = time()
	
	autoInspectParam = win32com.client.Dispatch(Application.Dictionary.GetObject("Preferences").NestedObjects("Interaction")).Parameters("autoinspect")
	autoInspectState = autoInspectParam.Value
	autoInspectParam.Value = False

	usedSortGroups = {}
	sortDefinitions = {}
	allGroups = Application.FindObjects(None, "{9D0673C2-6741-11D1-BE9F-00A024EE478D}")
	groupsByName = {}	
	
	for g in allGroups:
		groupName = cleanupGroupName(g.Name)
		if not groupName in groupsByName.keys():
			groupsByName[groupName] = [g]
		else:
			groupsByName[groupName].append(g)
	
	for p in sortControllers:
		sortDefinitionStr = p.Parameters("sortDefinition").Value
		sortDefinition = {}
		sortDefinition["sets"] = []
		inComment = False
		for l in sortDefinitionStr.split("\n"):
			if l.find("//") >= 0:
				l = l.split("//")[0]
			if l.find("/*") >= 0:
				inComment = True
			l = l.replace("\r", "")
			l = l.replace(" ", "")
			setDefinition = {}
			if not inComment:
				try:
					setName, conditional = l.split("=")
					setType = "o"

					if ":" in setName:
						setType, setName = setName.split(":")

					setDefinition["name"] = setName
					setDefinition["type"] = setType

					setDefinition["disjunctions"] = []
					disjunctions = conditional.split("|")
			
					for disjunction in disjunctions:
						conjunction = []
						literals = disjunction.split("&")
						for literal in literals:
							conjunction.append(literal)
							usedSortGroups[cleanupGroupName(literal)] = []
						setDefinition["disjunctions"].append(conjunction)
					sortDefinition["sets"].append(setDefinition)
				except:
					if l != "":
						Application.LogMessage("Malformed sort format: " + l, constants.siError)
			if inComment and l.find("*/") >= 0:
				inComment = False
			
		sortDefinitions[p.FullName] = sortDefinition

	for groupName in usedSortGroups.keys():
		if groupName == "*":
			usedSortGroups[groupName] = getAllObjects()
		else:
			members = {}
			if groupName in groupsByName.keys():
			
				for group in groupsByName[groupName]:
					for o in group.Members:
						members[o.FullName] = o
			usedSortGroups[groupName] = members.keys()
		
	oAllLights = Application.FindObjects(None, "{F3705C30-5204-11D0-8298-00A0243E366B}")
	allLights = []
	for l in oAllLights:
		allLights.append(l.parent.FullName)
	
	test_mode_list = []
	actionString = "Sorting"
	if test_mode:
		actionString = "Testing"

	for p in sortControllers:
		partitionStartTime = time()
		log( "%s Pass: %s" % ( actionString, p.Parent.Name ) )
		
		sortDefinition = sortDefinitions[p.FullName]
		parentObj = p.Parent

		seenObjects = []
		numSets = len(sortDefinition["sets"])

		for i in xrange(numSets - 1, -1, -1):
			setDefinition = sortDefinition["sets"][i]
			setName = setDefinition["name"]
			setType = setDefinition["type"]
			
			disjunctions = setDefinition["disjunctions"]
			members = []
			for conjunction in disjunctions:
				firstLiteral = True
				conjunctionMembers = {}
				for literal in conjunction:
					groupName = cleanupGroupName(literal)
					if firstLiteral:
						conjunctionMembers = [o for o in usedSortGroups[groupName]]
						firstLiteral = False
					else:
						testCollection = usedSortGroups[groupName]
						conjunctionMembers = [m for m in conjunctionMembers if m in testCollection]
				for m in conjunctionMembers:
					if not m in members:
						members.append(m)
			
			allowedMembers = []
			if setType == "l":
				for m in members:
					if m in allLights:
						if m not in seenObjects:
							if Application.ClassName(Application.Dictionary.GetObject(m)) == "Light":
								allowedMembers.append(m)
								seenObjects.append(m)
			elif setType == "o":
				for m in members:
					if m not in seenObjects:
						allowedMembers.append(m)
						seenObjects.append(m)
			
			members = allowedMembers
			
			i = 0   
			if parentObj.Type == "Pass":			
				try:
					partition = Application.Dictionary.GetObject(parentObj.FullName + ".Partitions." + setName)
					for pm in partition.members:
						try: 
							members.remove(pm.FullName)
							i = i + 1
						except:
							pass

					if not test_mode:
						Application.MoveToPartition(partition.FullName, ",".join(members))
					else:
						for m in members:
							test_mode_list.append( (m.fullname, partition.FullName) )

					#log("	" + str(round(time() - partitionStartTime, 3)) + "s. Sorted partition: " + setName )
				except:
					if not test_mode:
						if setType == "l":
							parentObj.CreatePartition(setName, 2)
						elif setType == "o":
							parentObj.CreatePartition(setName, 1)
						partition = Application.Dictionary.GetObject(parentObj.FullName + ".Partitions." + setName)
						for pm in partition.members:
							try:
								members.remove(pm.FullName)
							except:
								pass
						Application.MoveToPartition(partition.FullName, ",".join(members))
						# log("	" + str(round(time() - partitionStartTime, 3)) + "s. Created partition: " + setName )
					else:
						for m in members:
							test_mode_list.append( (m, "%s.%s"%(parentObj.name, setName) ) )

				if test_mode and test_quickly and test_mode_list:
					log( "Unsorted Objects detected in %s."%parentObj, constants.siWarning)
					return test_mode_list
		log( "	" + str(round(time() - startTime, 3)) + "s Total. Finished %s pass: %s" % ( actionString, parentObj.Name ), constants.siVerbose)
	autoInspectParam.Value = autoInspectState

	if test_mode:
		if test_mode_list:
			log( "Unsorted Objects in %s" % parentObj.name , constants.siWarning)
			for entry in test_mode_list:
				log(  "     Object %s is supposed to be in partition %s" % entry, constants.siVerbose)
			log( "%s is not sorted!" % parentObj.name , constants.siError)
			return test_mode_list
		else:
			log( "Pass '%s' is sorted properly." % parentObj.name, constants.siWarning )





def sortAllSortControllers_Execute( silentMode ):
	global g_silentMode
	g_silentMode = silentMode
	Application.DeselectAll()
	Application.sortControllerExecute("")
	g_silentMode = False
	

def checkAllSortControllers_Execute( silentMode ):
	global g_silentMode
	g_silentMode = silentMode

	startingPass = Application.GetCurrentPass().fullname
	Application.DeselectAll()
	error_list = Application.sortControllerExecute("", True)
	if error_list:
		log( "One or more passes are improperly sorted. See script editor for more information.", constants.siError)
		g_silentMode = False
		return error_list
	else:		
		log( "All passes are sorted properly.", constants.siWarning)
		g_silentMode = False
		return []
	
def sortController_sort_OnClicked( ):
	sel = []
	for obj in Application.Selection:
		sel.append(obj.FullName)
	Application.DeselectAll()
	sortObjects(PPG.Inspected)
	Application.SelectObj(sel)

def sortController_sortAll_OnClicked( ):
	Application.sortAllSortControllers()

def sortController_sortCheck_OnClicked( ):
	sel = []
	for obj in Application.Selection:
		sel.append(obj.FullName)
	Application.DeselectAll()
	sortObjects(PPG.Inspected, True)
	Application.SelectObj(sel)

def sortController_sortCheckAll_OnClicked( ):
	Application.checkAllSortControllers()

def sortControllerExecute_Execute(sortControllers, test_mode = False):
	test_mode_list = []
	if sortControllers == "" or sortControllers.Count == 0 or sortControllers == None:
		sortControllers = [p for p in Application.ActiveProject.ActiveScene.Passes]
		for p in Application.ActiveProject.ActiveScene.Passes:
			if p.Properties("sortController") != None:
				problems = sortObjects([p.Properties("sortController")], test_mode)
				if problems:
					test_mode_list.append(problems)
				Application.Refresh()
			else:
				log("Could not find sortController on " + p.FullName)
	else:
		sel = []
		for obj in Application.Selection:
			sel.append(obj.FullName)
		Application.DeselectAll()
		controllerProps = []
		for s in sortControllers:
			if s.Type == "sortController":
				controllerProps.append(s)
			elif s.Type == "Pass":
				try:
					col = XSIFactory.CreateObject("XSI.Collection")
					col.SetAsText(s.FullName + ".sortController")
					controllerProps.append(col[0])
				except:
					pass
					log("Could not find sortController on " + s.FullName)
			else:
				log( s.FullName + " is not a sort controller or a pass", constants.siError )
		uniqueControllerProps = []
		stringTest = []
		for e in controllerProps: 
			if str(e) not in stringTest: 
				uniqueControllerProps.append(e)
				stringTest.append(str(e))
		test_mode_list.append( sortObjects(uniqueControllerProps, test_mode) )
		Application.SelectObj(sel)
	if test_mode:
		return test_mode_list
	else:
		return True

def sortController_Menu_Init( in_ctxt ):
	oMenu = in_ctxt.Source
	oMenu.AddCallbackItem("SortController: Add to selected pass","OnsortControllerMenuClicked")
	oMenu.AddCommandItem("SortController: Sort all passes","sortAllSortControllers")
	oMenu.AddCommandItem("SortController: Check all passes","checkAllSortControllers")
	return true

def OnsortControllerMenuClicked( in_ctxt ):
	Application.AddProp("sortController")
	return 1

def OnsortControllerExecuteMenuClicked( in_ctxt ):
	Application.sortControllerExecute(Application.Selection)
	return 1

def sortControllerExecute_Menu_Init( in_ctxt ):
	oMenu = in_ctxt.Source
	oMenu.AddCallbackItem("sortControllerExecute","OnsortControllerExecuteMenuClicked")
	return true


